package _start.config;

import java.time.LocalDate;
import java.util.ArrayList;

import _start.kalender.MinusWeekList;
import common.Data;
import common.LocalMethods;
import common.log.CommonLog;
import common.out.info.InfoWeekConflict;

public class HandleCalendarPeriod {

	// ---------------------------------------------------------------------------------------------
	// CONSTRUCTOR
	// ---------------------------------------------------------------------------------------------
	/**
	 * This class handle calendar period.
	 * 
	 * @param line
	 *            Current configuration line.
	 * @param minusWeekList
	 *            List of weeks with no play times.
	 */
	public HandleCalendarPeriod(String line, ArrayList<Integer[]> minusWeekList) {
		CommonLog.logger.info("heading//");

		String sub = line.substring(8);
		/*
		 * Check if the period string has a minus (e.g. "20180601-20190901" or
		 * "periode -uge 2018 7").
		 */
		String[] periodSplit = sub.split("-");
		if (periodSplit.length == 2) {
			/*
			 * remove unexpected spaces before 'uge' (e.g. if "periode - uge 2018 7").
			 */
			String trimmed = periodSplit[1].trim();
			if (trimmed.startsWith("uge")) {
				String temp = trimmed.substring(4).trim();
				/*
				 * Check if text is added to -uge (e.g. "uge 2018 7, Ingen bridge i denne uge").
				 */
				String[] ugeSplit = temp.split(" ");
				if (ugeSplit.length == 2) {
					// No text.
					createMinusWeekList(ugeSplit, "");
				} else {
					// Possible week text.
					if (ugeSplit[1].contains(",")) {
						String[] textTemp = temp.split(",");
						if (textTemp.length == 2) {
							// Split year and week.
							ugeSplit = textTemp[0].split(" ");
							if (ugeSplit.length == 2) {
								createMinusWeekList(ugeSplit, textTemp[1]);
							} else
								new InfoWeekConflict(line);
						} else
							new InfoWeekConflict(line);
					} else
						new InfoWeekConflict(line);
				}
			} else {
				// get configuration start date of period.
				LocalDate start = LocalMethods.getLocalDate(periodSplit[0]);
				int startWeekDay = start.getDayOfWeek().getValue();
				int startMonth = start.getMonthValue();
				if (startWeekDay > 1 && startMonth > 1) {
					/*
					 * First day of calender period has to be a monday. So if this is not the case
					 * let start month be the previous month except for January.
					 */
					startMonth = startMonth - 1;

				}
				// get first day of month.
				start = getLocalDate(start.getYear(), start.getMonthValue());
				Data.setKalenderStart(start);
				// get configuration end date of period.
				LocalDate ends = LocalMethods.getLocalDate(periodSplit[1]);
				// get first day of next month.
				ends = getLocalDate(ends.getYear(), ends.plusMonths(1).getMonthValue());
				Data.setKalenderSlut(ends);
			}
		}
	}

	private void createMinusWeekList(String[] ugeSplit, String text) {
		int year = Integer.parseInt(ugeSplit[0]);
		int week = Integer.parseInt(ugeSplit[1]);
		MinusWeekList weekList = new MinusWeekList(year, week, text.trim());
		Data.addMinusWeekList(weekList);
		weekList = null;
	}

	private LocalDate getLocalDate(int y, int m) {
		int d = 1;
		return LocalDate.of(y, m, d);
	}

	private void addToWeekList(String[] ugeSplit, ArrayList<Integer[]> weekList) {
		Integer[] list = new Integer[2];
		if (LocalMethods.isParsableToInt(ugeSplit[0]))
			list[0] = Integer.parseInt(ugeSplit[0]);
		if (LocalMethods.isParsableToInt(ugeSplit[1]))
			list[1] = Integer.parseInt(ugeSplit[1]);
		weekList.add(list);
	}
}
