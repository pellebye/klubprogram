package _start.config;

import static java.time.temporal.TemporalAdjusters.next;

import java.time.DayOfWeek;
import java.time.LocalDate;
import java.util.ArrayList;

import _start.kalender.WeekHandling;
import common.LocalMethods;
import common.log.CommonLog;
import common.out.info.InfoDateConflict;

public class CreatePlayTimeDates {

	private LocalDate start = null;

	// ---------------------------------------------------------------------------------------------
	// CONSTRUCTOR
	// ---------------------------------------------------------------------------------------------
	public CreatePlayTimeDates(String period, String line, boolean skipEverySecond) {
		CommonLog.logger.info("heading//");

		LocalDate date = null;
		ArrayList<LocalDate> datoer = new ArrayList<>();
		int dayOfWeek = -1;

		if (period.startsWith("+")) {
			/*
			 * Add mandatory date to date list.
			 */
			date = LocalMethods.getLocalDate(period.substring(1));
			dayOfWeek = date.getDayOfWeek().getValue();
			datoer.add(date);
		} else {
			// Split period according to minus.
			String[] split2 = period.split("-");
			if (split2.length != 2) {
				/*
				 * If not a period between two dates inform user of a date conflict in current
				 * configuration line.
				 */
				String datoLinje = line;
				new InfoDateConflict(datoLinje);
			}
			start = LocalMethods.getLocalDate(split2[0]);
			LocalDate slut = LocalMethods.getLocalDate(split2[1]);
			date = start;
			dayOfWeek = start.getDayOfWeek().getValue();

			boolean skipDayOn = true;
			while (date.isBefore(slut) || date.isEqual(slut)) {

				/*
				 * When skip every second is not set or if skip every second is set and and skip
				 * day on. Skip day on is alternate between on and off.
				 */
				if (!skipEverySecond || (skipEverySecond && skipDayOn)) {
					WeekHandling weekHandling = new WeekHandling(date);

					// If not minus week add date to date list.
					if (!weekHandling.isMinusWeek()) {
						datoer.add(date);
					}

					weekHandling = null;
				}

				/*
				 * Get next week day in current period. If skip every second is set alternate
				 * skip day on.
				 */
				LocalDate next = date.with(next(DayOfWeek.of(dayOfWeek)));
				date = next;
				if (skipDayOn) {
					skipDayOn = false;
				} else {
					skipDayOn = true;
				}
			}

			// Reset skip every second.
			skipEverySecond = false;
		}

		playTime.setDatoer(datoer);
		playTime.setDayOfWeek(dayOfWeek);
}
